{"version":3,"sources":["components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","props","className","routes","map","route","path","name","key","to","Home","lazy","Blog","NotFound","App","width","height","viewBox","fill","xmlns","fillRule","d","fallback","exact","component","style","background","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0PAYaA,EAAa,SAACC,GAavB,OACI,wBAAIC,UAAU,cAbqBD,EAAME,OAAOC,KAAI,SAACC,GAAmB,IAChEC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAEd,OACI,wBAAIC,IAAMF,EAAOJ,UAAU,YACvB,kBAAC,IAAD,CAASO,GAAKH,EAAOJ,UAAU,YACzBK,SCdhBG,EAAOC,gBAAK,kBAAM,gCAClBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAWF,gBAAK,kBAAM,gCA6CbG,EA3CH,WAYR,OACE,kBAAC,IAAD,KACE,gCACE,yBAAKZ,UAAU,wBACb,yBAAKa,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYf,UAAU,2BAA2BgB,KAAK,eAAeC,MAAM,8BACjH,0BAAMC,SAAS,UAAUC,EAAE,qIAKjC,0BAAMnB,UAAU,iBACZ,kBAAC,WAAD,CAAUoB,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACjB,KAAK,IAAIkB,UAAWd,IACjC,kBAAC,IAAD,CAAOJ,KAAK,QAAQkB,UAAWZ,IAC/B,kBAAC,IAAD,CAAON,KAAK,IAAIkB,UAAWX,OAKnC,4BAAQX,UAAU,gDAAgDuB,MAAO,CAACC,WAAY,YACpF,yBAAKxB,UAAU,aACb,kBAAC,IAAD,CAASO,GAAG,GAAGP,UAAU,gBAAzB,oBAEA,kBAAC,EAAD,CAAYC,OAnCK,CACvB,CACEG,KAAM,IACNC,KAAM,QAER,CACED,KAAM,QACNC,KAAM,eCLRoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,QDiBnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACpBC,sBACA9B,OAAOC,SAAS8B,MAEJC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,sBAAN,sBAEPhC,IAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.084a2f66.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    name: string;\r\n}\r\n\r\nexport interface INavigationProps {\r\n    routes: IRoute[];\r\n}\r\n\r\nexport const Navigation = (props: INavigationProps): JSX.Element => {\r\n    const mapRoutes = (): JSX.Element[] => props.routes.map((route: IRoute) => {\r\n        const { path, name } = route;\r\n        \r\n        return (\r\n            <li key={ path } className=\"nav-item\">\r\n                <NavLink to={ path } className=\"nav-link\">\r\n                    { name }\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"navbar-nav\">\r\n            { mapRoutes() }\r\n        </ul>\r\n    );\r\n};","import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter, Route, Switch, NavLink } from 'react-router-dom';\r\n\r\nimport { Navigation, IRoute } from './components/Navigation';\r\n\r\nconst Home = lazy(() => import('./routes/Home'));\r\nconst Blog = lazy(() => import('./routes/Blog'));\r\nconst NotFound = lazy(() => import('./routes/NotFound'));\r\n\r\nconst App = (): JSX.Element => {\r\n    const routes: IRoute[] = [\r\n      {\r\n        path: '/',\r\n        name: 'Home'\r\n      },\r\n      {\r\n        path: '/blog',\r\n        name: 'Blog'\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <HashRouter>\r\n        <header>\r\n          <div className=\"container p-3 d-flex\">\r\n            <svg width=\"1rem\" height=\"1rem\" viewBox=\"0 0 16 16\" className=\"bi bi-three-dots ml-auto\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path fillRule=\"evenodd\" d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\"/>\r\n            </svg>\r\n          </div>\r\n        </header>\r\n\r\n        <main className=\"container p-3\">         \r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/blog\" component={Blog} />\r\n                <Route path=\"*\" component={NotFound} />\r\n              </Switch>\r\n            </Suspense>\r\n        </main>\r\n        \r\n        <footer className=\"navbar fixed-bottom navbar-dark navbar-expand\" style={{background: '#20232a'}}>\r\n          <div className=\"container\">\r\n            <NavLink to=\"\" className=\"navbar-brand\">Dennis Abramsson</NavLink>\r\n\r\n            <Navigation routes={routes} />\r\n          </div>\r\n        </footer>\r\n      </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('App')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}